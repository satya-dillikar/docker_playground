# .circleci/config.yml

version: 2.1
parameters:
  VERSION:
    type: string
    default: "0.1.0"
  DOCKER_REPOSITORY:
    type: string
    default: "dsatya6"
  IMAGE_NAME:
    type: string
    default: "golang-server"
  DOCKER_USERNAME:
    type: string
    default: "dsatya6"
  DOCKER_PASSWORD:
    type: string
    default: "e363f6ff-fa3c-443a-a2a4-0c42fe6e8692"

## Definitions
common_envars: &common_envars
  VERSION: << pipeline.parameters.VERSION >>
  DOCKER_REPOSITORY: << pipeline.parameters.DOCKER_REPOSITORY >>
  IMAGE_NAME: << pipeline.parameters.IMAGE_NAME >>
  DOCKER_USERNAME: << pipeline.parameters.DOCKER_USERNAME >>
  DOCKER_PASSWORD: << pipeline.parameters.DOCKER_PASSWORD >>


jobs:
  # This build job just tests that the binary can build. If your project is a
  # library, not a binary, you don't need this build job. In other words, omit
  # this job if you don't have a func main() in your project.
  build:
    docker:
      - image: circleci/golang:1.15.8
    working_directory: ~/myapp
    steps:
      - checkout
      - run:
          name: "Building Server"
          command: |
            CGO_ENABLED=0 go build -a -o bin/server_main ./server/main.go
  lint:
    docker:
      - image: golangci/golangci-lint:v1.37-alpine
    working_directory: ~/myapp
    steps:
      - checkout
      - run:
          name: "Linting files"
          command: |
            golangci-lint run
  test:
    docker:
      - image: circleci/golang:1.16
    working_directory: ~/myapp
    steps:
      - checkout
      - run:
          name: Run tests
          command: |
            go test -v -race ./...

  docker-build:
    working_directory: ~/myapp
    environment:
      CGO_ENABLED: "0"
      <<: *common_envars
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Dump Config Params"
          command: |
            echo VERSION $VERSION
            echo DOCKER_REPOSITORY $DOCKER_REPOSITORY
            echo IMAGE_NAME $IMAGE_NAME
            echo DOCKER_USERNAME $DOCKER_USERNAME
            echo DOCKER_PASSWORD $DOCKER_PASSWORD
            apk update && apk upgrade &&
            apk --no-cache add curl &&
            curl --version
      - run:
          name: "Docker login"
          command: |
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
      - run:
          name: "Docker build container"
          command: |
            docker build -t ${DOCKER_REPOSITORY}/${IMAGE_NAME}:${VERSION} .
      - run:
          name: Docker Test Container
          command: |
            docker rm -f ${IMAGE_NAME}  2>/dev/null || true  &&
            docker run -dp 8080:8081 --name=${IMAGE_NAME} ${DOCKER_REPOSITORY}/${IMAGE_NAME}:${VERSION}  2>/dev/null ||true  &&
            sleep 5 &&
            curl -s --retry 10 --retry-delay 5 http://0.0.0.0:8080  &&
            echo "" &&
            curl -s --retry 10 --retry-delay 5 http://0.0.0.0:8080/hi  &&
            echo "" &&
            curl -s --retry 10 --retry-delay 5 http://0.0.0.0:8080/test  &&
            echo "" &&
            sleep 5 &&
            docker stop ${IMAGE_NAME}  2>/dev/null  || true  &&
            docker rm ${IMAGE_NAME}  2>/dev/null || true
      - run:
          name: Docker Push Container
          command: |
            docker push ${DOCKER_REPOSITORY}/${IMAGE_NAME}:${VERSION}
workflows:
  build_lint_test:
    jobs:
      - build
      - lint
      - test
      - docker-build
