# .circleci/config.yml

version: 2.1
parameters:
  VERSION:
    type: string
    default: "0.1.0"
  DOCKER_REPOSITORY:
    type: string
    default: "dsatya6"
  IMAGE_NAME:
    type: string
    default: "http_json_rest"
  DOCKER_USERNAME:
    type: string
    default: "dsatya6"
  DOCKER_PASSWORD:
    type: string
    default: "e363f6ff-fa3c-443a-a2a4-0c42fe6e8692"

## Definitions
common_envars: &common_envars
  VERSION: << pipeline.parameters.VERSION >>
  DOCKER_REPOSITORY: << pipeline.parameters.DOCKER_REPOSITORY >>
  IMAGE_NAME: << pipeline.parameters.IMAGE_NAME >>
  DOCKER_USERNAME: << pipeline.parameters.DOCKER_USERNAME >>
  DOCKER_PASSWORD: << pipeline.parameters.DOCKER_PASSWORD >>


jobs:
  # This build job just tests that the binary can build. If your project is a
  # library, not a binary, you don't need this build job. In other words, omit
  # this job if you don't have a func main() in your project.
  build:
    docker:
      - image: circleci/golang:1.15.8
    working_directory: ~/modern-apps
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "distributed_apps/http_json_rest/go.mod" }}
      - run:
          name: Install Dependencies
          # command: go get ./...
          command: |
            cd distributed_apps/http_json_rest
            go mod download
      - run:
          name: "Building Client"
          command: |
            cd distributed_apps/http_json_rest
            CGO_ENABLED=0 go build -a -o bin/client_main ./client/client_main.go
      - run:
          name: "Building Server"
          command: |
            cd distributed_apps/http_json_rest
            CGO_ENABLED=0 go build -a -o bin/server_main ./server/server_main.go
      - save_cache:
          key: go-mod-v4-{{ checksum "distributed_apps/http_json_rest/go.mod" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Run tests
          command: |
            cd distributed_apps/http_json_rest
            go test -v -race ./...
  lint:
    docker:
      - image: golangci/golangci-lint:v1.37-alpine
    working_directory: ~/modern-apps
    steps:
      - checkout
      - run:
          name: "Linting files"
          command: |
            cd distributed_apps/http_json_rest
            golangci-lint run
  test:
    docker:
      # We use golang:1.16 instead of golang:1.16-alpine because we want to run
      # tests with the race detector enabled. The race detector requires glibc,
      # which is only present in the Debian-based containers.
      - image: circleci/golang:1.16
    working_directory: ~/modern-apps
    steps:
      - checkout
      - run:
          name: Run tests
          command: |
            cd distributed_apps/http_json_rest
            go test -v -race ./...

  docker-build:
    working_directory: ~/modern-apps
    environment:
      CGO_ENABLED: "0"
      <<: *common_envars
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - "./caches/app.tar"
      - run:
          name: "Dump Config Params"
          command: |
            echo VERSION $VERSION
            echo DOCKER_REPOSITORY $DOCKER_REPOSITORY
            echo IMAGE_NAME $IMAGE_NAME
            echo DOCKER_USERNAME $DOCKER_USERNAME
            echo DOCKER_PASSWORD $DOCKER_PASSWORD
            apk update && apk upgrade &&
            apk --no-cache add curl &&
            curl --version
      - run:
          name: "Docker login"
          command: |
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: "Docker build container"
          command: |
            cd distributed_apps/http_json_rest
            docker build -t ${DOCKER_REPOSITORY}/${IMAGE_NAME}:${VERSION} .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            #docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - "./caches/app.tar"
      - run:
          name: Docker Test Container
          command: |
            cd distributed_apps/http_json_rest  &&
            docker rm -f ${IMAGE_NAME}  2>/dev/null || true  &&
            docker run -dp 9001:9001 --name=${IMAGE_NAME} ${DOCKER_REPOSITORY}/${IMAGE_NAME}:${VERSION}  2>/dev/null ||true  &&
            #docker ps  &&
            sleep 5 &&
            #curl http://www.example.com/ &&
            curl -s --retry 10 --retry-delay 5 http://0.0.0.0:9001 | grep Me  &&
            docker stop ${IMAGE_NAME}  2>/dev/null  || true  &&
            docker rm ${IMAGE_NAME}  2>/dev/null || true
      - run:
          name: Docker Push Container
          command: |
            cd distributed_apps/http_json_rest
            docker push ${DOCKER_REPOSITORY}/${IMAGE_NAME}:${VERSION}
workflows:
  build_lint_test:
    jobs:
      - build
      - lint
      - test
      - docker-build
